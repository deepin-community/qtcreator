// Copyright (C) 2021 The Qt Company Ltd.
// SPDX-License-Identifier: LicenseRef-Qt-Commercial OR GFDL-1.3-no-invariants-only

/*!
    \previouspage studio-optimized-3d-scenes.html
    \page studio-implementing-applications.html
    \nextpage studio-designer-developer-workflow.html

    \title Implementing Applications

    \table
        \row
            \li \image qds-front-preview.png
            \li \QDS attempts to meet your needs, whether you have previous
                experience with QML and coding or not. When you install \QDS,
                the default configuration allows you to start wireframing,
                prototyping, and validating UIs with very little effort.

                You can use the \l{Code} view to edit your component
                files (.qml). If you use JavaScript, you can debug and profile
                your UIs to find and fix problems in them.
    \endtable

    \list

        \li \l{Designer-Developer Workflow}

            In \QDS projects, you work on \l{UI Files}{UI files} (.ui.qml),
            while developers work on the .qml and C++ source files in
            Qt Creator to create an application that you can build and
            run on target hardware.
        \li \l{Code}{Coding}

            Modify QML code in the \uicontrol {Code} view. The code editor
            understands the QML language as code, not just as plain text, so it
            can offer useful features, such as semantic highlighting, checking
            code syntax, code completion, and refactoring actions.
        \li \l{Debugging and Profiling}

            \QDS comes with a JavaScript debugger. In the \uicontrol Debug mode,
            you can inspect the state of your UI while debugging.

            The memory and CPU power available on devices are limited and
            you should use them carefully. With QML Profiler, you can find
            problems in QML code.
    \endlist
*/
